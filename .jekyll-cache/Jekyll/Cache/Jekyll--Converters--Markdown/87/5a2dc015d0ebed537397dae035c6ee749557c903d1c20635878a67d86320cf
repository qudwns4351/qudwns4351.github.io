I"-<h4 id="java">Java</h4>
<p>java는 네트위크상에서 쓸 수 있도록 미국의 Sun마이크로시스템이 개발한 개체지향 프로그래밍 언어</p>
<ul>
  <li>JVM만 설치하면 컴퓨터의 운영체제에 상관없이 작동한한<strong>(운영체제에 독립)</strong></li>
  <li>기본 자료형을 제외한 모든 요소들을 객체로 표현</li>
  <li>객체 지향 개념의 특징인 캡슐화, 상속, 다형성이 잘 적용된 언어</li>
  <li>Garbage Collector를 통한 메모리 관리기능</li>
  <li>멀티쓰레드(Multi-thread)를 지원한다.
    <h4 id="oop객체지향-프로그래밍">OOP(객체지향 프로그래밍)</h4>
    <p>Object-Oriented Programming의 약어로써 객체지향 프로그래밍을 의미 <br />
데이터를 객체로 취급하여 프로그램에 반영한 것이며, 순차적으로 프로그램이 동작하는 기존의 것들과는 다르게 객체와 객체의 상호작용을 통해 프로그램이 동작하는 것을 말한다.</p>
  </li>
  <li>객체지향 프로그래밍은 코드 재사용성이 높다.</li>
  <li>코드의 변경이 용이</li>
  <li>직관적인 코드 분석</li>
  <li>개발속도 향상</li>
  <li>상속을 통한 장점 극대화
    <h4 id="object">Object</h4>
    <p>Object(객체)는 OOP에서 데이터(변수)와 그 데이터에 관련되는 동작(함수). 즉 절차, 방법, 기능을 모두 포함한 개념</p>
    <h4 id="overloading-vs-overriding">Overloading vs Overriding</h4>
    <p>Overloading(오버로딩)</p>
  </li>
  <li>같은 이름의 메소드를 여러 개 정의하는 것.</li>
  <li>매개변수의 타입이 다르거나 개수가 달라야 한다.</li>
  <li>Return type과 접근 제어자는 영향을 주지 않음
Overriding(오버라이딩)</li>
  <li>상속에서 나온 개념</li>
  <li>상위 클래스(부모 클래스)의 메소드를 하위 클래스(자식 클래스)에서 재정의
    <h4 id="jdbc">JDBC</h4>
  </li>
  <li>Java Data Base Connection의 약자로 JAVA 언어를 통해 데이터베이스에 접근할 수 있는 프로그래밍
    <h4 id="interface-abstract">Interface, Abstract</h4>
    <p>Interface</p>
  </li>
  <li>일종의 추상 클래스</li>
  <li>오직 추상메서드와 상수만을 멤버로 갖는다.</li>
  <li>implements 키워드를 사용</li>
  <li>상속의 관계가 없는 클래스간 서로 공동되는 로직을 구현하여 쓸 수 있도록 한다.</li>
  <li>Extends는 하나의 클래스만 상속 가능하나 Interface는 다중 상속이 가능하다.
Abstract</li>
  <li>추상메소드를 하나 이상 가진 클래스</li>
  <li>자신의 생성자로 객체 생성 불가능</li>
  <li>하위 클래스를 참조하여 상위 클래스의 객체를 생성</li>
  <li>하위 클래스를 제어하기 위해 사용
    <h5 id="interface-vs-abstract">Interface vs Abstract</h5>
    <p>공통점</p>
  </li>
  <li>New 연산자로 인스턴스 생성 불가능</li>
  <li>프로토타입만 있는 메서드를 갖는다.</li>
  <li>사용하기 위해서는 하위클래스에서 확장/구현해야 한다.
차이점</li>
  <li>사용하는 키워드가 다르다.</li>
  <li>Abstract는 일반 메서드를 사용할 수 있지만, Interface는 메서드 선언만 가능하다</li>
</ul>

<p><a class="btn btn-primary float-left" href="/aa">이전</a></p>
:ET